
UART_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c50  08003c50  00004c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00005018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c88  08003c88  00005018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c88  08003c88  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00004c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003c90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005018  2**0
                  CONTENTS
 10 .bss          000000b4  20000018  20000018  00005018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00005018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7a9  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a80  00000000  00000000  0000f7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  00011278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b1  00000000  00000000  000119e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0a7  00000000  00000000  00011f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abaa  00000000  00000000  00031040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc776  00000000  00000000  0003bbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8360  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d20  00000000  00000000  000f83a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000fa0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c38 	.word	0x08003c38

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08003c38 	.word	0x08003c38

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa0a 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f830 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8b0 	bl	8000344 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e4:	f000 f87e 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuf, 10);
 80001e8:	220a      	movs	r2, #10
 80001ea:	4911      	ldr	r1, [pc, #68]	@ (8000230 <main+0x5c>)
 80001ec:	4811      	ldr	r0, [pc, #68]	@ (8000234 <main+0x60>)
 80001ee:	f002 fafc 	bl	80027ea <HAL_UART_Receive_IT>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) // Butona basılınca
	  {   // Gönder
		  HAL_UART_Transmit(&huart1, (uint8_t*)rxBuf, 9, HAL_MAX_DELAY); HAL_Delay(200); }
	  */

	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, 10, HAL_MAX_DELAY);
 80001f2:	f04f 33ff 	mov.w	r3, #4294967295
 80001f6:	220a      	movs	r2, #10
 80001f8:	490f      	ldr	r1, [pc, #60]	@ (8000238 <main+0x64>)
 80001fa:	480e      	ldr	r0, [pc, #56]	@ (8000234 <main+0x60>)
 80001fc:	f002 fa6c 	bl	80026d8 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000200:	20c8      	movs	r0, #200	@ 0xc8
 8000202:	f000 fa5b 	bl	80006bc <HAL_Delay>
	  // Eğer cevap geldiyse
	  if (rxFlag)
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <main+0x68>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f1      	beq.n	80001f2 <main+0x1e>
	  {
		  rxFlag = 0; // sıfırla
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <main+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // LED toggle
 8000214:	2120      	movs	r1, #32
 8000216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021a:	f000 fda3 	bl	8000d64 <HAL_GPIO_TogglePin>
		  HAL_Delay(200); // Tekrar dinlemeye başla
 800021e:	20c8      	movs	r0, #200	@ 0xc8
 8000220:	f000 fa4c 	bl	80006bc <HAL_Delay>
		  HAL_UART_Receive_IT(&huart1, (uint8_t*)rxBuf, 10);
 8000224:	220a      	movs	r2, #10
 8000226:	4902      	ldr	r1, [pc, #8]	@ (8000230 <main+0x5c>)
 8000228:	4802      	ldr	r0, [pc, #8]	@ (8000234 <main+0x60>)
 800022a:	f002 fade 	bl	80027ea <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, 10, HAL_MAX_DELAY);
 800022e:	e7e0      	b.n	80001f2 <main+0x1e>
 8000230:	200000bc 	.word	0x200000bc
 8000234:	20000034 	.word	0x20000034
 8000238:	20000000 	.word	0x20000000
 800023c:	200000c6 	.word	0x200000c6

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b0a6      	sub	sp, #152	@ 0x98
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fcbe 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2258      	movs	r2, #88	@ 0x58
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fcb0 	bl	8003bd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	2310      	movs	r3, #16
 800027a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fd85 	bl	8000d98 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f8c0 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029c:	2300      	movs	r3, #0
 800029e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fd94 	bl	8001de0 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f8ab 	bl	8000418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff99 	bl	8002204 <HAL_RCCEx_PeriphCLKConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002d8:	f000 f89e 	bl	8000418 <Error_Handler>
  }
}
 80002dc:	bf00      	nop
 80002de:	3798      	adds	r7, #152	@ 0x98
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_USART1_UART_Init+0x58>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	@ (8000340 <MX_USART1_UART_Init+0x5c>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002ee:	4b13      	ldr	r3, [pc, #76]	@ (800033c <MX_USART1_UART_Init+0x58>)
 80002f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_USART1_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_USART1_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_USART1_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_USART1_UART_Init+0x58>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <MX_USART1_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_USART1_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <MX_USART1_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_USART1_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_USART1_UART_Init+0x58>)
 8000328:	f002 f988 	bl	800263c <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f871 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000034 	.word	0x20000034
 8000340:	40013800 	.word	0x40013800

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035a:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_GPIO_Init+0x94>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a1e      	ldr	r2, [pc, #120]	@ (80003d8 <MX_GPIO_Init+0x94>)
 8000360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <MX_GPIO_Init+0x94>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <MX_GPIO_Init+0x94>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <MX_GPIO_Init+0x94>)
 8000378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_GPIO_Init+0x94>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f000 fccf 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	480c      	ldr	r0, [pc, #48]	@ (80003dc <MX_GPIO_Init+0x98>)
 80003ac:	f000 fb38 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003b0:	2320      	movs	r3, #32
 80003b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	4619      	mov	r1, r3
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ca:	f000 fb29 	bl	8000a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000800 	.word	0x48000800

080003e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a06      	ldr	r2, [pc, #24]	@ (8000408 <HAL_UART_RxCpltCallback+0x28>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <HAL_UART_RxCpltCallback+0x20>
		rxFlag = 1;
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_UART_RxCpltCallback+0x2c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
		strcpy(txMsg, rxBuf);
 80003f8:	4905      	ldr	r1, [pc, #20]	@ (8000410 <HAL_UART_RxCpltCallback+0x30>)
 80003fa:	4806      	ldr	r0, [pc, #24]	@ (8000414 <HAL_UART_RxCpltCallback+0x34>)
 80003fc:	f003 fc14 	bl	8003c28 <strcpy>
	}
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40013800 	.word	0x40013800
 800040c:	200000c6 	.word	0x200000c6
 8000410:	200000bc 	.word	0x200000bc
 8000414:	20000000 	.word	0x20000000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	@ 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1b      	ldr	r2, [pc, #108]	@ (80004f8 <HAL_UART_MspInit+0x8c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d12f      	bne.n	80004ee <HAL_UART_MspInit+0x82>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800048e:	4b1b      	ldr	r3, [pc, #108]	@ (80004fc <HAL_UART_MspInit+0x90>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a1a      	ldr	r2, [pc, #104]	@ (80004fc <HAL_UART_MspInit+0x90>)
 8000494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <HAL_UART_MspInit+0x90>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_UART_MspInit+0x90>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <HAL_UART_MspInit+0x90>)
 80004ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_UART_MspInit+0x90>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004be:	2330      	movs	r3, #48	@ 0x30
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004ce:	2307      	movs	r3, #7
 80004d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <HAL_UART_MspInit+0x94>)
 80004da:	f000 faa1 	bl	8000a20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	2025      	movs	r0, #37	@ 0x25
 80004e4:	f000 f9e9 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004e8:	2025      	movs	r0, #37	@ 0x25
 80004ea:	f000 fa02 	bl	80008f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80004ee:	bf00      	nop
 80004f0:	3728      	adds	r7, #40	@ 0x28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40013800 	.word	0x40013800
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000800 	.word	0x48000800

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <NMI_Handler+0x4>

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <MemManage_Handler+0x4>

0800051c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <UsageFault_Handler+0x4>

0800052c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f000 f88f 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <USART1_IRQHandler+0x10>)
 800056a:	f002 f983 	bl	8002874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000034 	.word	0x20000034

08000578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	@ (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f003 fb09 	bl	8003be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe01 	bl	80001d4 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80005e0:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 80005e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80005e8:	200000cc 	.word	0x200000cc

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f94f 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	200f      	movs	r0, #15
 8000608:	f000 f808 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff ff0a 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f967 	bl	800090e <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 f92f 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000000c 	.word	0x2000000c
 8000674:	20000014 	.word	0x20000014
 8000678:	20000010 	.word	0x20000010

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000014 	.word	0x20000014
 80006a0:	200000c8 	.word	0x200000c8

080006a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a8:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <HAL_GetTick+0x14>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200000c8 	.word	0x200000c8

080006bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ffee 	bl	80006a4 <HAL_GetTick>
 80006c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <HAL_Delay+0x44>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006e2:	bf00      	nop
 80006e4:	f7ff ffde 	bl	80006a4 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f7      	bhi.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000014 	.word	0x20000014

08000704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <__NVIC_GetPriorityGrouping+0x18>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0307 	and.w	r3, r3, #7
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	db0b      	blt.n	8000792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 021f 	and.w	r2, r3, #31
 8000780:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <__NVIC_EnableIRQ+0x38>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	2001      	movs	r0, #1
 800078a:	fa00 f202 	lsl.w	r2, r0, r2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	@ 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff29 	bl	8000704 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff3e 	bl	800074c <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff31 	bl	8000768 <__NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffa2 	bl	8000860 <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d101      	bne.n	8000938 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e02e      	b.n	8000996 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800093e:	2b02      	cmp	r3, #2
 8000940:	d008      	beq.n	8000954 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2204      	movs	r2, #4
 8000946:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e020      	b.n	8000996 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 020e 	bic.w	r2, r2, #14
 8000962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d005      	beq.n	80009c4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2204      	movs	r2, #4
 80009bc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e027      	b.n	8000a14 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 020e 	bic.w	r2, r2, #14
 80009d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 0201 	bic.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	4798      	blx	r3
    }
  }
  return status;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e160      	b.n	8000cf2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8152 	beq.w	8000cec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	f003 0201 	and.w	r2, r3, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d017      	beq.n	8000afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0203 	and.w	r2, r3, #3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80ac 	beq.w	8000cec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	4b5e      	ldr	r3, [pc, #376]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a5d      	ldr	r2, [pc, #372]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bac:	4a59      	ldr	r2, [pc, #356]	@ (8000d14 <HAL_GPIO_Init+0x2f4>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bd6:	d025      	beq.n	8000c24 <HAL_GPIO_Init+0x204>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4f      	ldr	r2, [pc, #316]	@ (8000d18 <HAL_GPIO_Init+0x2f8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d01f      	beq.n	8000c20 <HAL_GPIO_Init+0x200>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4e      	ldr	r2, [pc, #312]	@ (8000d1c <HAL_GPIO_Init+0x2fc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d019      	beq.n	8000c1c <HAL_GPIO_Init+0x1fc>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4d      	ldr	r2, [pc, #308]	@ (8000d20 <HAL_GPIO_Init+0x300>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d013      	beq.n	8000c18 <HAL_GPIO_Init+0x1f8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8000d24 <HAL_GPIO_Init+0x304>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d00d      	beq.n	8000c14 <HAL_GPIO_Init+0x1f4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000d28 <HAL_GPIO_Init+0x308>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d007      	beq.n	8000c10 <HAL_GPIO_Init+0x1f0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4a      	ldr	r2, [pc, #296]	@ (8000d2c <HAL_GPIO_Init+0x30c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d101      	bne.n	8000c0c <HAL_GPIO_Init+0x1ec>
 8000c08:	2306      	movs	r3, #6
 8000c0a:	e00c      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	e00a      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c10:	2305      	movs	r3, #5
 8000c12:	e008      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e004      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e002      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c24:	2300      	movs	r3, #0
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	f002 0203 	and.w	r2, r2, #3
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	4093      	lsls	r3, r2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c36:	4937      	ldr	r1, [pc, #220]	@ (8000d14 <HAL_GPIO_Init+0x2f4>)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c68:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c92:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f47f ae97 	bne.w	8000a30 <HAL_GPIO_Init+0x10>
  }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001000 	.word	0x48001000
 8000d28:	48001400 	.word	0x48001400
 8000d2c:	48001800 	.word	0x48001800
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	041a      	lsls	r2, r3, #16
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43d9      	mvns	r1, r3
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	400b      	ands	r3, r1
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000da8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000daa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f001 b80a 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8161 	beq.w	8001096 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd4:	4bae      	ldr	r3, [pc, #696]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d00c      	beq.n	8000dfa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de0:	4bab      	ldr	r3, [pc, #684]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d157      	bne.n	8000e9c <HAL_RCC_OscConfig+0x104>
 8000dec:	4ba8      	ldr	r3, [pc, #672]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df8:	d150      	bne.n	8000e9c <HAL_RCC_OscConfig+0x104>
 8000dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e12:	fab3 f383 	clz	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e1a:	d802      	bhi.n	8000e22 <HAL_RCC_OscConfig+0x8a>
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	e015      	b.n	8000e4e <HAL_RCC_OscConfig+0xb6>
 8000e22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e3a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e3e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e4a:	4b91      	ldr	r3, [pc, #580]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e52:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e56:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e5a:	fa92 f2a2 	rbit	r2, r2
 8000e5e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	f042 0220 	orr.w	r2, r2, #32
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	f002 021f 	and.w	r2, r2, #31
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8108 	beq.w	8001094 <HAL_RCC_OscConfig+0x2fc>
 8000e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 80ff 	bne.w	8001094 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f000 bf9b 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eac:	d106      	bne.n	8000ebc <HAL_RCC_OscConfig+0x124>
 8000eae:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a77      	ldr	r2, [pc, #476]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e036      	b.n	8000f2a <HAL_RCC_OscConfig+0x192>
 8000ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x14e>
 8000ecc:	4b70      	ldr	r3, [pc, #448]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6f      	ldr	r2, [pc, #444]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a6c      	ldr	r2, [pc, #432]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e021      	b.n	8000f2a <HAL_RCC_OscConfig+0x192>
 8000ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x17a>
 8000ef8:	4b65      	ldr	r3, [pc, #404]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a64      	ldr	r2, [pc, #400]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b62      	ldr	r3, [pc, #392]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a61      	ldr	r2, [pc, #388]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e00b      	b.n	8000f2a <HAL_RCC_OscConfig+0x192>
 8000f12:	4b5f      	ldr	r3, [pc, #380]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5e      	ldr	r2, [pc, #376]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5b      	ldr	r2, [pc, #364]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d054      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fbb3 	bl	80006a4 <HAL_GetTick>
 8000f3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	e00a      	b.n	8000f5a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fbae 	bl	80006a4 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	@ 0x64
 8000f52:	d902      	bls.n	8000f5a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f000 bf3c 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8000f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f5e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f7a:	d802      	bhi.n	8000f82 <HAL_RCC_OscConfig+0x1ea>
 8000f7c:	4b44      	ldr	r3, [pc, #272]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	e015      	b.n	8000fae <HAL_RCC_OscConfig+0x216>
 8000f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f86:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f9a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000faa:	4b39      	ldr	r3, [pc, #228]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fb2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000fb6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000fba:	fa92 f2a2 	rbit	r2, r2
 8000fbe:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000fc2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fc6:	fab2 f282 	clz	r2, r2
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f042 0220 	orr.w	r2, r2, #32
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	f002 021f 	and.w	r2, r2, #31
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0b0      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1ac>
 8000fe2:	e058      	b.n	8001096 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb5e 	bl	80006a4 <HAL_GetTick>
 8000fe8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb59 	bl	80006a4 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	@ 0x64
 8000ffc:	d902      	bls.n	8001004 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	f000 bee7 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001008:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001018:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b3f      	cmp	r3, #63	@ 0x3f
 8001024:	d802      	bhi.n	800102c <HAL_RCC_OscConfig+0x294>
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x2c0>
 800102c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001030:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001044:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001048:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_RCC_OscConfig+0x2f8>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800105c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001060:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800106c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1b0      	bne.n	8000fee <HAL_RCC_OscConfig+0x256>
 800108c:	e003      	b.n	8001096 <HAL_RCC_OscConfig+0x2fe>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800109a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 816d 	beq.w	8001386 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ac:	4bcd      	ldr	r3, [pc, #820]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b8:	4bca      	ldr	r3, [pc, #808]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d16e      	bne.n	80011a2 <HAL_RCC_OscConfig+0x40a>
 80010c4:	4bc7      	ldr	r3, [pc, #796]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010d0:	d167      	bne.n	80011a2 <HAL_RCC_OscConfig+0x40a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80010f0:	d802      	bhi.n	80010f8 <HAL_RCC_OscConfig+0x360>
 80010f2:	4bbc      	ldr	r3, [pc, #752]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x388>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001110:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800111c:	4bb1      	ldr	r3, [pc, #708]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	2202      	movs	r2, #2
 8001122:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001126:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001132:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00a      	beq.n	8001168 <HAL_RCC_OscConfig+0x3d0>
 8001152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d002      	beq.n	8001168 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 be35 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001168:	4b9e      	ldr	r3, [pc, #632]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001174:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	21f8      	movs	r1, #248	@ 0xf8
 800117e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001186:	fa91 f1a1 	rbit	r1, r1
 800118a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800118e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001192:	fab1 f181 	clz	r1, r1
 8001196:	b2c9      	uxtb	r1, r1
 8001198:	408b      	lsls	r3, r1
 800119a:	4992      	ldr	r1, [pc, #584]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a0:	e0f1      	b.n	8001386 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8083 	beq.w	80012ba <HAL_RCC_OscConfig+0x522>
 80011b4:	2301      	movs	r3, #1
 80011b6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80011c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	461a      	mov	r2, r3
 80011dc:	2301      	movs	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fa60 	bl	80006a4 <HAL_GetTick>
 80011e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fa5b 	bl	80006a4 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d902      	bls.n	8001200 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	f000 bde9 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001212:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b3f      	cmp	r3, #63	@ 0x3f
 800121e:	d802      	bhi.n	8001226 <HAL_RCC_OscConfig+0x48e>
 8001220:	4b70      	ldr	r3, [pc, #448]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e013      	b.n	800124e <HAL_RCC_OscConfig+0x4b6>
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800123e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800124a:	4b66      	ldr	r3, [pc, #408]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001254:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001260:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001264:	fab2 f282 	clz	r2, r2
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f042 0220 	orr.w	r2, r2, #32
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f002 021f 	and.w	r2, r2, #31
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0b4      	beq.n	80011ea <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b58      	ldr	r3, [pc, #352]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	21f8      	movs	r1, #248	@ 0xf8
 8001296:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800129e:	fa91 f1a1 	rbit	r1, r1
 80012a2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80012a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012aa:	fab1 f181 	clz	r1, r1
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	408b      	lsls	r3, r1
 80012b2:	494c      	ldr	r1, [pc, #304]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e065      	b.n	8001386 <HAL_RCC_OscConfig+0x5ee>
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80012cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff f9dd 	bl	80006a4 <HAL_GetTick>
 80012ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff f9d8 	bl	80006a4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bd66 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001318:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b3f      	cmp	r3, #63	@ 0x3f
 8001324:	d802      	bhi.n	800132c <HAL_RCC_OscConfig+0x594>
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e013      	b.n	8001354 <HAL_RCC_OscConfig+0x5bc>
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001344:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <HAL_RCC_OscConfig+0x64c>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	2202      	movs	r2, #2
 8001356:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800135a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800135e:	fa92 f2a2 	rbit	r2, r2
 8001362:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001366:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f042 0220 	orr.w	r2, r2, #32
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f002 021f 	and.w	r2, r2, #31
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1b4      	bne.n	80012f0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8119 	beq.w	80015ce <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800139c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 8082 	beq.w	80014b2 <HAL_RCC_OscConfig+0x71a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80013c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_RCC_OscConfig+0x650>)
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	461a      	mov	r2, r3
 80013d4:	2301      	movs	r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f964 	bl	80006a4 <HAL_GetTick>
 80013dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	e00f      	b.n	8001402 <HAL_RCC_OscConfig+0x66a>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff f95a 	bl	80006a4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d902      	bls.n	8001402 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f000 bce8 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001414:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001460:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4bb0      	ldr	r3, [pc, #704]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 8001464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800146e:	2102      	movs	r1, #2
 8001470:	6019      	str	r1, [r3, #0]
 8001472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f1a3 	rbit	r1, r3
 8001480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001484:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001488:	6019      	str	r1, [r3, #0]
  return result;
 800148a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d09d      	beq.n	80013ec <HAL_RCC_OscConfig+0x654>
 80014b0:	e08d      	b.n	80015ce <HAL_RCC_OscConfig+0x836>
 80014b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f2a3 	rbit	r2, r3
 80014cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d4:	601a      	str	r2, [r3, #0]
  return result;
 80014d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001728 <HAL_RCC_OscConfig+0x990>)
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	461a      	mov	r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff f8d6 	bl	80006a4 <HAL_GetTick>
 80014f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff f8d1 	bl	80006a4 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d902      	bls.n	8001514 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f000 bc5f 	b.w	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800151c:	2202      	movs	r2, #2
 800151e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001556:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001560:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800157e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b68      	ldr	r3, [pc, #416]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 8001582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001588:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800158c:	2102      	movs	r1, #2
 800158e:	6019      	str	r1, [r3, #0]
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f1a3 	rbit	r1, r3
 800159e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a6:	6019      	str	r1, [r3, #0]
  return result;
 80015a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d197      	bne.n	80014fe <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 819c 	beq.w	800191c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800160a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_RCC_OscConfig+0x994>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d11a      	bne.n	8001666 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_RCC_OscConfig+0x994>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a3d      	ldr	r2, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x994>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163c:	f7ff f832 	bl	80006a4 <HAL_GetTick>
 8001640:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e009      	b.n	800165a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff f82d 	bl	80006a4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e3bb      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x994>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ef      	beq.n	8001646 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x8ec>
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a2a      	ldr	r2, [pc, #168]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e035      	b.n	80016f0 <HAL_RCC_OscConfig+0x958>
 8001684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001688:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x916>
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e020      	b.n	80016f0 <HAL_RCC_OscConfig+0x958>
 80016ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x940>
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x958>
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_RCC_OscConfig+0x98c>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8085 	beq.w	800180c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7fe ffcf 	bl	80006a4 <HAL_GetTick>
 8001706:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e011      	b.n	8001730 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7fe ffca 	bl	80006a4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d907      	bls.n	8001730 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e356      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001724:	40021000 	.word	0x40021000
 8001728:	10908120 	.word	0x10908120
 800172c:	40007000 	.word	0x40007000
 8001730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001734:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001740:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	fa93 f2a3 	rbit	r2, r3
 800174a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001758:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001764:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001772:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001776:	601a      	str	r2, [r3, #0]
  return result;
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001780:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_RCC_OscConfig+0xa00>
 8001792:	4b98      	ldr	r3, [pc, #608]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	e013      	b.n	80017c0 <HAL_RCC_OscConfig+0xa28>
 8001798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017a0:	2202      	movs	r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4b8d      	ldr	r3, [pc, #564]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017c8:	2102      	movs	r1, #2
 80017ca:	6011      	str	r1, [r2, #0]
 80017cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	fa92 f1a2 	rbit	r1, r2
 80017da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017de:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017e2:	6011      	str	r1, [r2, #0]
  return result;
 80017e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f002 021f 	and.w	r2, r2, #31
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d080      	beq.n	800170c <HAL_RCC_OscConfig+0x974>
 800180a:	e07d      	b.n	8001908 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7fe ff4a 	bl	80006a4 <HAL_GetTick>
 8001810:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7fe ff45 	bl	80006a4 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e2d1      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001836:	2202      	movs	r2, #2
 8001838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001856:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001862:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001874:	601a      	str	r2, [r3, #0]
  return result;
 8001876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800187e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0xafe>
 8001890:	4b58      	ldr	r3, [pc, #352]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0xb26>
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018c6:	2102      	movs	r1, #2
 80018c8:	6011      	str	r1, [r2, #0]
 80018ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018ce:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018dc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018e0:	6011      	str	r1, [r2, #0]
  return result;
 80018e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018e6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f002 021f 	and.w	r2, r2, #31
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d186      	bne.n	8001816 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001908:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a37      	ldr	r2, [pc, #220]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800191a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001920:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8251 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	f000 820f 	beq.w	8001d5a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001940:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 8165 	bne.w	8001c18 <HAL_RCC_OscConfig+0xe80>
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001956:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001972:	601a      	str	r2, [r3, #0]
  return result;
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800197c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001988:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	461a      	mov	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7fe fe86 	bl	80006a4 <HAL_GetTick>
 8001998:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7fe fe81 	bl	80006a4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e20f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d6:	601a      	str	r2, [r3, #0]
  return result;
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ea:	d805      	bhi.n	80019f8 <HAL_RCC_OscConfig+0xc60>
 80019ec:	4b01      	ldr	r3, [pc, #4]	@ (80019f4 <HAL_RCC_OscConfig+0xc5c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e02a      	b.n	8001a48 <HAL_RCC_OscConfig+0xcb0>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a18:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4bca      	ldr	r3, [pc, #808]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a4c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a5a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fa92 f1a2 	rbit	r1, r2
 8001a64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a68:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a6c:	6011      	str	r1, [r2, #0]
  return result;
 8001a6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a72:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d184      	bne.n	800199e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	4bb6      	ldr	r3, [pc, #728]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	f023 020f 	bic.w	r2, r3, #15
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	49b1      	ldr	r1, [pc, #708]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001aae:	4bb0      	ldr	r3, [pc, #704]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a19      	ldr	r1, [r3, #32]
 8001ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	49a7      	ldr	r1, [pc, #668]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ada:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ade:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b00:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b04:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	461a      	mov	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fdc2 	bl	80006a4 <HAL_GetTick>
 8001b20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe fdbd 	bl	80006a4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e14b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b72:	d802      	bhi.n	8001b7a <HAL_RCC_OscConfig+0xde2>
 8001b74:	4b7e      	ldr	r3, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e027      	b.n	8001bca <HAL_RCC_OscConfig+0xe32>
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bd2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bd6:	6011      	str	r1, [r2, #0]
 8001bd8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bdc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	fa92 f1a2 	rbit	r1, r2
 8001be6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bea:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bee:	6011      	str	r1, [r2, #0]
  return result;
 8001bf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bf4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d087      	beq.n	8001b26 <HAL_RCC_OscConfig+0xd8e>
 8001c16:	e0db      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1038>
 8001c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c3c:	601a      	str	r2, [r3, #0]
  return result;
 8001c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c42:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c46:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fd21 	bl	80006a4 <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	e009      	b.n	8001c7c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe fd1c 	bl	80006a4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0aa      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ca0:	601a      	str	r2, [r3, #0]
  return result;
 8001ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001caa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cb4:	d802      	bhi.n	8001cbc <HAL_RCC_OscConfig+0xf24>
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e027      	b.n	8001d0c <HAL_RCC_OscConfig+0xf74>
 8001cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cdc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_RCC_OscConfig+0xfd8>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d10:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d1e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d36:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d187      	bne.n	8001c68 <HAL_RCC_OscConfig+0xed0>
 8001d58:	e03a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d104      	bne.n	8001d74 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e031      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_OscConfig+0x1044>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_RCC_OscConfig+0x1044>)
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d88:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d117      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001da0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09e      	sub	sp, #120	@ 0x78
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e154      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b89      	ldr	r3, [pc, #548]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b86      	ldr	r3, [pc, #536]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4984      	ldr	r1, [pc, #528]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b82      	ldr	r3, [pc, #520]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e13c      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4978      	ldr	r1, [pc, #480]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80cd 	beq.w	8001fee <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d137      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xec>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e74:	d802      	bhi.n	8001e7c <HAL_RCC_ClockConfig+0x9c>
 8001e76:	4b6b      	ldr	r3, [pc, #428]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_RCC_ClockConfig+0xbc>
 8001e7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e98:	4b62      	ldr	r3, [pc, #392]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ea0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001eaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d171      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0ea      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d137      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x164>
 8001ed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eec:	d802      	bhi.n	8001ef4 <HAL_RCC_ClockConfig+0x114>
 8001eee:	4b4d      	ldr	r3, [pc, #308]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e00f      	b.n	8001f14 <HAL_RCC_ClockConfig+0x134>
 8001ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f10:	4b44      	ldr	r3, [pc, #272]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f18:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d135      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ae      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
 8001f44:	2302      	movs	r3, #2
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f5a:	d802      	bhi.n	8001f62 <HAL_RCC_ClockConfig+0x182>
 8001f5c:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e00d      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
 8001f62:	2302      	movs	r3, #2
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	2202      	movs	r2, #2
 8001f80:	61ba      	str	r2, [r7, #24]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	617a      	str	r2, [r7, #20]
  return result;
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f002 021f 	and.w	r2, r2, #31
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e07a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 0203 	bic.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	491a      	ldr	r1, [pc, #104]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbe:	f7fe fb71 	bl	80006a4 <HAL_GetTick>
 8001fc2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc6:	f7fe fb6d 	bl	80006a4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e062      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 020c 	and.w	r2, r3, #12
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d1eb      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d215      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0207 	bic.w	r2, r3, #7
 8002004:	4906      	ldr	r1, [pc, #24]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <HAL_RCC_ClockConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d006      	beq.n	8002028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e041      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2c2>
 800201e:	bf00      	nop
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_RCC_ClockConfig+0x2cc>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	491a      	ldr	r1, [pc, #104]	@ (80020ac <HAL_RCC_ClockConfig+0x2cc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002052:	4b16      	ldr	r3, [pc, #88]	@ (80020ac <HAL_RCC_ClockConfig+0x2cc>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4912      	ldr	r1, [pc, #72]	@ (80020ac <HAL_RCC_ClockConfig+0x2cc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002066:	f000 f829 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800206a:	4601      	mov	r1, r0
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <HAL_RCC_ClockConfig+0x2cc>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002074:	22f0      	movs	r2, #240	@ 0xf0
 8002076:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	60fa      	str	r2, [r7, #12]
  return result;
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	40d3      	lsrs	r3, r2
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x2d0>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	fa21 f303 	lsr.w	r3, r1, r3
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <HAL_RCC_ClockConfig+0x2d4>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_RCC_ClockConfig+0x2d8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fabe 	bl	800061c <HAL_InitTick>
  
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3778      	adds	r7, #120	@ 0x78
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003c50 	.word	0x08003c50
 80020b4:	2000000c 	.word	0x2000000c
 80020b8:	20000010 	.word	0x20000010

080020bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x30>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ea:	e029      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ee:	613b      	str	r3, [r7, #16]
      break;
 80020f0:	e029      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0c9b      	lsrs	r3, r3, #18
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa0>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002100:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xa4>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002118:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x9c>)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e007      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x9c>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	613b      	str	r3, [r7, #16]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	693b      	ldr	r3, [r7, #16]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	08003c68 	.word	0x08003c68
 8002160:	08003c78 	.word	0x08003c78

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002182:	f7ff ffef 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002190:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002194:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	603a      	str	r2, [r7, #0]
  return result;
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	40d3      	lsrs	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08003c60 	.word	0x08003c60

080021c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021c6:	f7ff ffcd 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021d4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	603a      	str	r2, [r7, #0]
  return result;
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08003c60 	.word	0x08003c60

08002204 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b092      	sub	sp, #72	@ 0x48
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80d2 	beq.w	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002228:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10e      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	4a49      	ldr	r2, [pc, #292]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223e:	61d3      	str	r3, [r2, #28]
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a40      	ldr	r2, [pc, #256]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7fe fa1b 	bl	80006a4 <HAL_GetTick>
 800226e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7fe fa17 	bl	80006a4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	@ 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1d4      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b37      	ldr	r3, [pc, #220]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002290:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800229a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8082 	beq.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d07a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	2300      	movs	r3, #0
 8002300:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002302:	4a17      	ldr	r2, [pc, #92]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002306:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d049      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe f9c7 	bl	80006a4 <HAL_GetTick>
 8002316:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe f9c3 	bl	80006a4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e17e      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002330:	2302      	movs	r3, #2
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	61fb      	str	r3, [r7, #28]
  return result;
 8002348:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800235a:	4b01      	ldr	r3, [pc, #4]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	e00d      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
 8002368:	10908100 	.word	0x10908100
 800236c:	2302      	movs	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	4b9a      	ldr	r3, [pc, #616]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	2202      	movs	r2, #2
 800237e:	613a      	str	r2, [r7, #16]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	60fa      	str	r2, [r7, #12]
  return result;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0b9      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023a6:	4b8f      	ldr	r3, [pc, #572]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	498c      	ldr	r1, [pc, #560]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b88      	ldr	r3, [pc, #544]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a87      	ldr	r2, [pc, #540]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d8:	4b82      	ldr	r3, [pc, #520]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f023 0203 	bic.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	497f      	ldr	r1, [pc, #508]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f6:	4b7b      	ldr	r3, [pc, #492]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4978      	ldr	r1, [pc, #480]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002414:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4970      	ldr	r1, [pc, #448]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002432:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4969      	ldr	r1, [pc, #420]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002450:	4b64      	ldr	r3, [pc, #400]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	4961      	ldr	r1, [pc, #388]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246e:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f023 0220 	bic.w	r2, r3, #32
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	495a      	ldr	r1, [pc, #360]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248c:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	4952      	ldr	r1, [pc, #328]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024aa:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	494b      	ldr	r1, [pc, #300]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c8:	4b46      	ldr	r3, [pc, #280]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4943      	ldr	r1, [pc, #268]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e6:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	493c      	ldr	r1, [pc, #240]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002504:	4b37      	ldr	r3, [pc, #220]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	4934      	ldr	r1, [pc, #208]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	4313      	orrs	r3, r2
 8002514:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002522:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002530:	4313      	orrs	r3, r2
 8002532:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002540:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	4925      	ldr	r1, [pc, #148]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800255e:	4b21      	ldr	r3, [pc, #132]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	491e      	ldr	r1, [pc, #120]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	4916      	ldr	r1, [pc, #88]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800259a:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	490f      	ldr	r1, [pc, #60]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	4907      	ldr	r1, [pc, #28]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025d6:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	e002      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	4913      	ldr	r1, [pc, #76]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002608:	490b      	ldr	r1, [pc, #44]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002626:	4904      	ldr	r1, [pc, #16]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002628:	4313      	orrs	r3, r2
 800262a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3748      	adds	r7, #72	@ 0x48
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e040      	b.n	80026d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fd ff04 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	@ 0x24
 8002668:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fdd0 	bl	8003228 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fbf9 	bl	8002e80 <UART_SetConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01b      	b.n	80026d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fe4f 	bl	800336c <UART_CheckIdleState>
 80026ce:	4603      	mov	r3, r0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d177      	bne.n	80027e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_UART_Transmit+0x24>
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e070      	b.n	80027e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2221      	movs	r2, #33	@ 0x21
 800270c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270e:	f7fd ffc9 	bl	80006a4 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272c:	d108      	bne.n	8002740 <HAL_UART_Transmit+0x68>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e003      	b.n	8002748 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002748:	e02f      	b.n	80027aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2200      	movs	r2, #0
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 feb1 	bl	80034bc <UART_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03b      	b.n	80027e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277c:	b292      	uxth	r2, r2
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	3302      	adds	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	e007      	b.n	8002798 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1c9      	bne.n	800274a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	2140      	movs	r1, #64	@ 0x40
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fe7b 	bl	80034bc <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e005      	b.n	80027e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b08a      	sub	sp, #40	@ 0x28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	4613      	mov	r3, r2
 80027f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d132      	bne.n	8002868 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_UART_Receive_IT+0x24>
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e02b      	b.n	800286a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	613b      	str	r3, [r7, #16]
   return(result);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002848:	69f9      	ldr	r1, [r7, #28]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	61bb      	str	r3, [r7, #24]
   return(result);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e6      	bne.n	8002826 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	461a      	mov	r2, r3
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fe9a 	bl	8003598 <UART_Start_Receive_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	e000      	b.n	800286a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0ba      	sub	sp, #232	@ 0xe8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800289a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800289e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80028a2:	4013      	ands	r3, r2
 80028a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80028a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00f      	beq.n	80028dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 82ab 	beq.w	8002e28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
      }
      return;
 80028da:	e2a5      	b.n	8002e28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8117 	beq.w	8002b14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80028f6:	4b85      	ldr	r3, [pc, #532]	@ (8002b0c <HAL_UART_IRQHandler+0x298>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 810a 	beq.w	8002b14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d011      	beq.n	8002930 <HAL_UART_IRQHandler+0xbc>
 800290c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <HAL_UART_IRQHandler+0xec>
 800293c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2202      	movs	r2, #2
 800294e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_UART_IRQHandler+0x11c>
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2204      	movs	r2, #4
 800297e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c2:	f043 0208 	orr.w	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_UART_IRQHandler+0x18a>
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8211 	beq.w	8002e2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04f      	beq.n	8002af6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fe64 	bl	8003724 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d141      	bne.n	8002aee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3308      	adds	r3, #8
 8002a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1d9      	bne.n	8002a6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac2:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <HAL_UART_IRQHandler+0x29c>)
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd ff69 	bl	80009a2 <HAL_DMA_Abort_IT>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e00f      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9b4 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	e00b      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f9b0 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	e007      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9ac 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002b04:	e192      	b.n	8002e2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b06:	bf00      	nop
    return;
 8002b08:	e190      	b.n	8002e2c <HAL_UART_IRQHandler+0x5b8>
 8002b0a:	bf00      	nop
 8002b0c:	04000120 	.word	0x04000120
 8002b10:	080037ed 	.word	0x080037ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 814b 	bne.w	8002db4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8144 	beq.w	8002db4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 813d 	beq.w	8002db4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	f040 80b5 	bne.w	8002cbc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8164 	beq.w	8002e30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f080 815c 	bcs.w	8002e30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	f000 8086 	beq.w	8002c9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002baa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bbc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1da      	bne.n	8002b8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002be8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e1      	bne.n	8002bd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3308      	adds	r3, #8
 8002c34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e3      	bne.n	8002c14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e4      	bne.n	8002c5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fe46 	bl	8000926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8d7 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cba:	e0b9      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80ab 	beq.w	8002e34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e4      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e3      	bne.n	8002d1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	69b9      	ldr	r1, [r7, #24]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	617b      	str	r3, [r7, #20]
   return(result);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e4      	bne.n	8002d6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f85b 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002db2:	e03f      	b.n	8002e34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <HAL_UART_IRQHandler+0x56a>
 8002dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fef0 	bl	8003bbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ddc:	e02d      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01c      	beq.n	8002e38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
    }
    return;
 8002e06:	e017      	b.n	8002e38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fcf9 	bl	8003818 <UART_EndTransmit_IT>
    return;
 8002e26:	e008      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e28:	bf00      	nop
 8002e2a:	e006      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e2c:	bf00      	nop
 8002e2e:	e004      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e30:	bf00      	nop
 8002e32:	e002      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e38:	bf00      	nop
  }

}
 8002e3a:	37e8      	adds	r7, #232	@ 0xe8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b92      	ldr	r3, [pc, #584]	@ (80030f4 <UART_SetConfig+0x274>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a80      	ldr	r2, [pc, #512]	@ (80030f8 <UART_SetConfig+0x278>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d120      	bne.n	8002f3e <UART_SetConfig+0xbe>
 8002efc:	4b7f      	ldr	r3, [pc, #508]	@ (80030fc <UART_SetConfig+0x27c>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d817      	bhi.n	8002f38 <UART_SetConfig+0xb8>
 8002f08:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <UART_SetConfig+0x90>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f2d 	.word	0x08002f2d
 8002f18:	08002f33 	.word	0x08002f33
 8002f1c:	08002f27 	.word	0x08002f27
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e0b5      	b.n	8003092 <UART_SetConfig+0x212>
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e0b2      	b.n	8003092 <UART_SetConfig+0x212>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e0af      	b.n	8003092 <UART_SetConfig+0x212>
 8002f32:	2308      	movs	r3, #8
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e0ac      	b.n	8003092 <UART_SetConfig+0x212>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e0a9      	b.n	8003092 <UART_SetConfig+0x212>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6f      	ldr	r2, [pc, #444]	@ (8003100 <UART_SetConfig+0x280>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d124      	bne.n	8002f92 <UART_SetConfig+0x112>
 8002f48:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <UART_SetConfig+0x27c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f54:	d011      	beq.n	8002f7a <UART_SetConfig+0xfa>
 8002f56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f5a:	d817      	bhi.n	8002f8c <UART_SetConfig+0x10c>
 8002f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f60:	d011      	beq.n	8002f86 <UART_SetConfig+0x106>
 8002f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f66:	d811      	bhi.n	8002f8c <UART_SetConfig+0x10c>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <UART_SetConfig+0xf4>
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f70:	d006      	beq.n	8002f80 <UART_SetConfig+0x100>
 8002f72:	e00b      	b.n	8002f8c <UART_SetConfig+0x10c>
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e08b      	b.n	8003092 <UART_SetConfig+0x212>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e088      	b.n	8003092 <UART_SetConfig+0x212>
 8002f80:	2304      	movs	r3, #4
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e085      	b.n	8003092 <UART_SetConfig+0x212>
 8002f86:	2308      	movs	r3, #8
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e082      	b.n	8003092 <UART_SetConfig+0x212>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e07f      	b.n	8003092 <UART_SetConfig+0x212>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5b      	ldr	r2, [pc, #364]	@ (8003104 <UART_SetConfig+0x284>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d124      	bne.n	8002fe6 <UART_SetConfig+0x166>
 8002f9c:	4b57      	ldr	r3, [pc, #348]	@ (80030fc <UART_SetConfig+0x27c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002fa4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fa8:	d011      	beq.n	8002fce <UART_SetConfig+0x14e>
 8002faa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fae:	d817      	bhi.n	8002fe0 <UART_SetConfig+0x160>
 8002fb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fb4:	d011      	beq.n	8002fda <UART_SetConfig+0x15a>
 8002fb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fba:	d811      	bhi.n	8002fe0 <UART_SetConfig+0x160>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <UART_SetConfig+0x148>
 8002fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fc4:	d006      	beq.n	8002fd4 <UART_SetConfig+0x154>
 8002fc6:	e00b      	b.n	8002fe0 <UART_SetConfig+0x160>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e061      	b.n	8003092 <UART_SetConfig+0x212>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e05e      	b.n	8003092 <UART_SetConfig+0x212>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e05b      	b.n	8003092 <UART_SetConfig+0x212>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e058      	b.n	8003092 <UART_SetConfig+0x212>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e055      	b.n	8003092 <UART_SetConfig+0x212>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a47      	ldr	r2, [pc, #284]	@ (8003108 <UART_SetConfig+0x288>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d124      	bne.n	800303a <UART_SetConfig+0x1ba>
 8002ff0:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <UART_SetConfig+0x27c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ff8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ffc:	d011      	beq.n	8003022 <UART_SetConfig+0x1a2>
 8002ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003002:	d817      	bhi.n	8003034 <UART_SetConfig+0x1b4>
 8003004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003008:	d011      	beq.n	800302e <UART_SetConfig+0x1ae>
 800300a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800300e:	d811      	bhi.n	8003034 <UART_SetConfig+0x1b4>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <UART_SetConfig+0x19c>
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003018:	d006      	beq.n	8003028 <UART_SetConfig+0x1a8>
 800301a:	e00b      	b.n	8003034 <UART_SetConfig+0x1b4>
 800301c:	2300      	movs	r3, #0
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e037      	b.n	8003092 <UART_SetConfig+0x212>
 8003022:	2302      	movs	r3, #2
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	e034      	b.n	8003092 <UART_SetConfig+0x212>
 8003028:	2304      	movs	r3, #4
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e031      	b.n	8003092 <UART_SetConfig+0x212>
 800302e:	2308      	movs	r3, #8
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e02e      	b.n	8003092 <UART_SetConfig+0x212>
 8003034:	2310      	movs	r3, #16
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e02b      	b.n	8003092 <UART_SetConfig+0x212>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a33      	ldr	r2, [pc, #204]	@ (800310c <UART_SetConfig+0x28c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d124      	bne.n	800308e <UART_SetConfig+0x20e>
 8003044:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <UART_SetConfig+0x27c>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800304c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003050:	d011      	beq.n	8003076 <UART_SetConfig+0x1f6>
 8003052:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003056:	d817      	bhi.n	8003088 <UART_SetConfig+0x208>
 8003058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800305c:	d011      	beq.n	8003082 <UART_SetConfig+0x202>
 800305e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003062:	d811      	bhi.n	8003088 <UART_SetConfig+0x208>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <UART_SetConfig+0x1f0>
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306c:	d006      	beq.n	800307c <UART_SetConfig+0x1fc>
 800306e:	e00b      	b.n	8003088 <UART_SetConfig+0x208>
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e00d      	b.n	8003092 <UART_SetConfig+0x212>
 8003076:	2302      	movs	r3, #2
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e00a      	b.n	8003092 <UART_SetConfig+0x212>
 800307c:	2304      	movs	r3, #4
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e007      	b.n	8003092 <UART_SetConfig+0x212>
 8003082:	2308      	movs	r3, #8
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e004      	b.n	8003092 <UART_SetConfig+0x212>
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e001      	b.n	8003092 <UART_SetConfig+0x212>
 800308e:	2310      	movs	r3, #16
 8003090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800309a:	d16b      	bne.n	8003174 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d838      	bhi.n	8003114 <UART_SetConfig+0x294>
 80030a2:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <UART_SetConfig+0x228>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	08003115 	.word	0x08003115
 80030b8:	080030e3 	.word	0x080030e3
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003115 	.word	0x08003115
 80030c4:	08003115 	.word	0x08003115
 80030c8:	080030eb 	.word	0x080030eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7ff f856 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80030d0:	61b8      	str	r0, [r7, #24]
        break;
 80030d2:	e024      	b.n	800311e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7ff f874 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 80030d8:	61b8      	str	r0, [r7, #24]
        break;
 80030da:	e020      	b.n	800311e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <UART_SetConfig+0x290>)
 80030de:	61bb      	str	r3, [r7, #24]
        break;
 80030e0:	e01d      	b.n	800311e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe ffeb 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 80030e6:	61b8      	str	r0, [r7, #24]
        break;
 80030e8:	e019      	b.n	800311e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ee:	61bb      	str	r3, [r7, #24]
        break;
 80030f0:	e015      	b.n	800311e <UART_SetConfig+0x29e>
 80030f2:	bf00      	nop
 80030f4:	efff69f3 	.word	0xefff69f3
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40021000 	.word	0x40021000
 8003100:	40004400 	.word	0x40004400
 8003104:	40004800 	.word	0x40004800
 8003108:	40004c00 	.word	0x40004c00
 800310c:	40005000 	.word	0x40005000
 8003110:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77bb      	strb	r3, [r7, #30]
        break;
 800311c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d073      	beq.n	800320c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	005a      	lsls	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	441a      	add	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d916      	bls.n	800316e <UART_SetConfig+0x2ee>
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003146:	d212      	bcs.n	800316e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b29a      	uxth	r2, r3
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	4313      	orrs	r3, r2
 8003162:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	89fa      	ldrh	r2, [r7, #14]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e04e      	b.n	800320c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	77bb      	strb	r3, [r7, #30]
 8003172:	e04b      	b.n	800320c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003174:	7ffb      	ldrb	r3, [r7, #31]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d827      	bhi.n	80031ca <UART_SetConfig+0x34a>
 800317a:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <UART_SetConfig+0x300>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031bb 	.word	0x080031bb
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031cb 	.word	0x080031cb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a4:	f7fe ffea 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80031a8:	61b8      	str	r0, [r7, #24]
        break;
 80031aa:	e013      	b.n	80031d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7ff f808 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 80031b0:	61b8      	str	r0, [r7, #24]
        break;
 80031b2:	e00f      	b.n	80031d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <UART_SetConfig+0x3a4>)
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e00c      	b.n	80031d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe ff7f 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 80031be:	61b8      	str	r0, [r7, #24]
        break;
 80031c0:	e008      	b.n	80031d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c6:	61bb      	str	r3, [r7, #24]
        break;
 80031c8:	e004      	b.n	80031d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	77bb      	strb	r3, [r7, #30]
        break;
 80031d2:	bf00      	nop
    }

    if (pclk != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	085a      	lsrs	r2, r3, #1
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d909      	bls.n	8003208 <UART_SetConfig+0x388>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fa:	d205      	bcs.n	8003208 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e001      	b.n	800320c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003218:	7fbb      	ldrb	r3, [r7, #30]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	007a1200 	.word	0x007a1200

08003228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01a      	beq.n	800333e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003326:	d10a      	bne.n	800333e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b098      	sub	sp, #96	@ 0x60
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800337c:	f7fd f992 	bl	80006a4 <HAL_GetTick>
 8003380:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d12e      	bne.n	80033ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003390:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f88c 	bl	80034bc <UART_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d021      	beq.n	80033ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033be:	653b      	str	r3, [r7, #80]	@ 0x50
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e6      	bne.n	80033aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e062      	b.n	80034b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d149      	bne.n	8003490 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f856 	bl	80034bc <UART_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03c      	beq.n	8003490 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	623b      	str	r3, [r7, #32]
   return(result);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003434:	633b      	str	r3, [r7, #48]	@ 0x30
 8003436:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800343a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e6      	bne.n	8003416 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	60fb      	str	r3, [r7, #12]
   return(result);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3308      	adds	r3, #8
 8003466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	617b      	str	r3, [r7, #20]
   return(result);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e011      	b.n	80034b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3758      	adds	r7, #88	@ 0x58
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034cc:	e04f      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d04b      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fd f8e5 	bl	80006a4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <UART_WaitOnFlagUntilTimeout+0x30>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e04e      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d037      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b80      	cmp	r3, #128	@ 0x80
 8003502:	d034      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b40      	cmp	r3, #64	@ 0x40
 8003508:	d031      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d110      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8ff 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2208      	movs	r2, #8
 800352a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e029      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003548:	d111      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f8e5 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d0a0      	beq.n	80034ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003598:	b480      	push	{r7}
 800359a:	b097      	sub	sp, #92	@ 0x5c
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ca:	d10e      	bne.n	80035ea <UART_Start_Receive_IT+0x52>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <UART_Start_Receive_IT+0x48>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80035da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035de:	e02d      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035e8:	e028      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <UART_Start_Receive_IT+0x76>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <UART_Start_Receive_IT+0x6c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	@ 0xff
 80035fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003602:	e01b      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	227f      	movs	r2, #127	@ 0x7f
 8003608:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800360c:	e016      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003616:	d10d      	bne.n	8003634 <UART_Start_Receive_IT+0x9c>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <UART_Start_Receive_IT+0x92>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	227f      	movs	r2, #127	@ 0x7f
 8003624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003628:	e008      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	223f      	movs	r2, #63	@ 0x3f
 800362e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003632:	e003      	b.n	800363c <UART_Start_Receive_IT+0xa4>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2222      	movs	r2, #34	@ 0x22
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800366c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800367a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003688:	d107      	bne.n	800369a <UART_Start_Receive_IT+0x102>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <UART_Start_Receive_IT+0x184>)
 8003696:	669a      	str	r2, [r3, #104]	@ 0x68
 8003698:	e002      	b.n	80036a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <UART_Start_Receive_IT+0x188>)
 800369e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d019      	beq.n	80036dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80036bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_Start_Receive_IT+0x110>
 80036da:	e018      	b.n	800370e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f043 0320 	orr.w	r3, r3, #32
 80036f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	61bb      	str	r3, [r7, #24]
   return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e6      	bne.n	80036dc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	375c      	adds	r7, #92	@ 0x5c
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	08003a15 	.word	0x08003a15
 8003720:	0800386d 	.word	0x0800386d

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b095      	sub	sp, #84	@ 0x54
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800374a:	643b      	str	r3, [r7, #64]	@ 0x40
 800374c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e6      	bne.n	800372c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	61fb      	str	r3, [r7, #28]
   return(result);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	2b01      	cmp	r3, #1
 8003798:	d118      	bne.n	80037cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 0310 	bic.w	r3, r3, #16
 80037ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	613b      	str	r3, [r7, #16]
   return(result);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037e0:	bf00      	nop
 80037e2:	3754      	adds	r7, #84	@ 0x54
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fb22 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	60bb      	str	r3, [r7, #8]
   return(result);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	613b      	str	r3, [r7, #16]
   return(result);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e6      	bne.n	8003820 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff faee 	bl	8002e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003864:	bf00      	nop
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b09c      	sub	sp, #112	@ 0x70
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800387a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003884:	2b22      	cmp	r3, #34	@ 0x22
 8003886:	f040 80b9 	bne.w	80039fc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003890:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003894:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003898:	b2d9      	uxtb	r1, r3
 800389a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a4:	400a      	ands	r2, r1
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 809c 	bne.w	8003a0c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	667b      	str	r3, [r7, #100]	@ 0x64
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003926:	647a      	str	r2, [r7, #68]	@ 0x44
 8003928:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800392c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d018      	beq.n	800398e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	623b      	str	r3, [r7, #32]
   return(result);
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003970:	663b      	str	r3, [r7, #96]	@ 0x60
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30
 800397c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e6      	bne.n	800395c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	2b01      	cmp	r3, #1
 8003994:	d12e      	bne.n	80039f4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f023 0310 	bic.w	r3, r3, #16
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	69b9      	ldr	r1, [r7, #24]
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	617b      	str	r3, [r7, #20]
   return(result);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e6      	bne.n	800399c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d103      	bne.n	80039e4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2210      	movs	r2, #16
 80039e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fa3b 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039f2:	e00b      	b.n	8003a0c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fc fcf3 	bl	80003e0 <HAL_UART_RxCpltCallback>
}
 80039fa:	e007      	b.n	8003a0c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	619a      	str	r2, [r3, #24]
}
 8003a0c:	bf00      	nop
 8003a0e:	3770      	adds	r7, #112	@ 0x70
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b09c      	sub	sp, #112	@ 0x70
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2c:	2b22      	cmp	r3, #34	@ 0x22
 8003a2e:	f040 80b9 	bne.w	8003ba4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003a38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003a46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 809c 	bne.w	8003bb4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a90:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003aa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e6      	bne.n	8003a7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ace:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e5      	bne.n	8003aae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b24:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12e      	bne.n	8003b9c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 0310 	bic.w	r3, r3, #16
 8003b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e6      	bne.n	8003b44 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d103      	bne.n	8003b8c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff f967 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b9a:	e00b      	b.n	8003bb4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fc fc1f 	bl	80003e0 <HAL_UART_RxCpltCallback>
}
 8003ba2:	e007      	b.n	8003bb4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0208 	orr.w	r2, r2, #8
 8003bb2:	619a      	str	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	3770      	adds	r7, #112	@ 0x70
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <memset>:
 8003bd0:	4402      	add	r2, r0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	f803 1b01 	strb.w	r1, [r3], #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <__libc_init_array>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4d0d      	ldr	r5, [pc, #52]	@ (8003c18 <__libc_init_array+0x38>)
 8003be4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c1c <__libc_init_array+0x3c>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	2600      	movs	r6, #0
 8003bec:	42a6      	cmp	r6, r4
 8003bee:	d109      	bne.n	8003c04 <__libc_init_array+0x24>
 8003bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003c20 <__libc_init_array+0x40>)
 8003bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003c24 <__libc_init_array+0x44>)
 8003bf4:	f000 f820 	bl	8003c38 <_init>
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	42a6      	cmp	r6, r4
 8003c00:	d105      	bne.n	8003c0e <__libc_init_array+0x2e>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c08:	4798      	blx	r3
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7ee      	b.n	8003bec <__libc_init_array+0xc>
 8003c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c12:	4798      	blx	r3
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7f2      	b.n	8003bfe <__libc_init_array+0x1e>
 8003c18:	08003c88 	.word	0x08003c88
 8003c1c:	08003c88 	.word	0x08003c88
 8003c20:	08003c88 	.word	0x08003c88
 8003c24:	08003c8c 	.word	0x08003c8c

08003c28 <strcpy>:
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c2e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	d1f9      	bne.n	8003c2a <strcpy+0x2>
 8003c36:	4770      	bx	lr

08003c38 <_init>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr

08003c44 <_fini>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr
